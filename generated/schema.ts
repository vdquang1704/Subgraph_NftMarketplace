// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ERC1155Listed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Listed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Listed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Listed", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Listed | null {
    return changetype<ERC1155Listed | null>(store.get("ERC1155Listed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value!.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC1155Sold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Sold entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Sold must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Sold", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Sold | null {
    return changetype<ERC1155Sold | null>(store.get("ERC1155Sold", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value!.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC1155ListedInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC1155ListedInfoPerWeek entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155ListedInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155ListedInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC1155ListedInfoPerWeek | null {
    return changetype<ERC1155ListedInfoPerWeek | null>(
      store.get("ERC1155ListedInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedToken(): BigInt {
    let value = this.get("totalListedToken");
    return value!.toBigInt();
  }

  set totalListedToken(value: BigInt) {
    this.set("totalListedToken", Value.fromBigInt(value));
  }

  get totalListedValue(): BigInt {
    let value = this.get("totalListedValue");
    return value!.toBigInt();
  }

  set totalListedValue(value: BigInt) {
    this.set("totalListedValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC1155SoldInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC1155SoldInfoPerWeek entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155SoldInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155SoldInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC1155SoldInfoPerWeek | null {
    return changetype<ERC1155SoldInfoPerWeek | null>(
      store.get("ERC1155SoldInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldToken(): BigInt {
    let value = this.get("totalSoldToken");
    return value!.toBigInt();
  }

  set totalSoldToken(value: BigInt) {
    this.set("totalSoldToken", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC1155ListedInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC1155ListedInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155ListedInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155ListedInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC1155ListedInfoPer30Day | null {
    return changetype<ERC1155ListedInfoPer30Day | null>(
      store.get("ERC1155ListedInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedToken(): BigInt {
    let value = this.get("totalListedToken");
    return value!.toBigInt();
  }

  set totalListedToken(value: BigInt) {
    this.set("totalListedToken", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class ERC1155SoldInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC1155SoldInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155SoldInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155SoldInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC1155SoldInfoPer30Day | null {
    return changetype<ERC1155SoldInfoPer30Day | null>(
      store.get("ERC1155SoldInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldToken(): BigInt {
    let value = this.get("totalSoldToken");
    return value!.toBigInt();
  }

  set totalSoldToken(value: BigInt) {
    this.set("totalSoldToken", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class ERC721Listed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Listed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Listed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Listed", id.toString(), this);
    }
  }

  static load(id: string): ERC721Listed | null {
    return changetype<ERC721Listed | null>(store.get("ERC721Listed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value!.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC721Sold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Sold entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721Sold must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Sold", id.toString(), this);
    }
  }

  static load(id: string): ERC721Sold | null {
    return changetype<ERC721Sold | null>(store.get("ERC721Sold", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value!.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC721ListedInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721ListedInfoPerWeek entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721ListedInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721ListedInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC721ListedInfoPerWeek | null {
    return changetype<ERC721ListedInfoPerWeek | null>(
      store.get("ERC721ListedInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedNft(): BigInt {
    let value = this.get("totalListedNft");
    return value!.toBigInt();
  }

  set totalListedNft(value: BigInt) {
    this.set("totalListedNft", Value.fromBigInt(value));
  }

  get totalListedValue(): BigInt {
    let value = this.get("totalListedValue");
    return value!.toBigInt();
  }

  set totalListedValue(value: BigInt) {
    this.set("totalListedValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC721SoldInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721SoldInfoPerWeek entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721SoldInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721SoldInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC721SoldInfoPerWeek | null {
    return changetype<ERC721SoldInfoPerWeek | null>(
      store.get("ERC721SoldInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldNft(): BigInt {
    let value = this.get("totalSoldNft");
    return value!.toBigInt();
  }

  set totalSoldNft(value: BigInt) {
    this.set("totalSoldNft", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC721ListedInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721ListedInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721ListedInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721ListedInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC721ListedInfoPer30Day | null {
    return changetype<ERC721ListedInfoPer30Day | null>(
      store.get("ERC721ListedInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedNft(): BigInt {
    let value = this.get("totalListedNft");
    return value!.toBigInt();
  }

  set totalListedNft(value: BigInt) {
    this.set("totalListedNft", Value.fromBigInt(value));
  }

  get totalListedValue(): BigInt {
    let value = this.get("totalListedValue");
    return value!.toBigInt();
  }

  set totalListedValue(value: BigInt) {
    this.set("totalListedValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class ERC721SoldInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC721SoldInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC721SoldInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721SoldInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC721SoldInfoPer30Day | null {
    return changetype<ERC721SoldInfoPer30Day | null>(
      store.get("ERC721SoldInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldNft(): BigInt {
    let value = this.get("totalSoldNft");
    return value!.toBigInt();
  }

  set totalSoldNft(value: BigInt) {
    this.set("totalSoldNft", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class ERC20Listed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Listed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Listed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Listed", id.toString(), this);
    }
  }

  static load(id: string): ERC20Listed | null {
    return changetype<ERC20Listed | null>(store.get("ERC20Listed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC20Sold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Sold entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Sold must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Sold", id.toString(), this);
    }
  }

  static load(id: string): ERC20Sold | null {
    return changetype<ERC20Sold | null>(store.get("ERC20Sold", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ERC20ListedInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20ListedInfoPerWeek entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20ListedInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20ListedInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC20ListedInfoPerWeek | null {
    return changetype<ERC20ListedInfoPerWeek | null>(
      store.get("ERC20ListedInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedToken(): BigInt {
    let value = this.get("totalListedToken");
    return value!.toBigInt();
  }

  set totalListedToken(value: BigInt) {
    this.set("totalListedToken", Value.fromBigInt(value));
  }

  get totalListedValue(): BigInt {
    let value = this.get("totalListedValue");
    return value!.toBigInt();
  }

  set totalListedValue(value: BigInt) {
    this.set("totalListedValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC20SoldInfoPerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20SoldInfoPerWeek entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20SoldInfoPerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20SoldInfoPerWeek", id.toString(), this);
    }
  }

  static load(id: string): ERC20SoldInfoPerWeek | null {
    return changetype<ERC20SoldInfoPerWeek | null>(
      store.get("ERC20SoldInfoPerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldToken(): BigInt {
    let value = this.get("totalSoldToken");
    return value!.toBigInt();
  }

  set totalSoldToken(value: BigInt) {
    this.set("totalSoldToken", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get weekNumber(): BigInt {
    let value = this.get("weekNumber");
    return value!.toBigInt();
  }

  set weekNumber(value: BigInt) {
    this.set("weekNumber", Value.fromBigInt(value));
  }

  get startWeek(): BigInt {
    let value = this.get("startWeek");
    return value!.toBigInt();
  }

  set startWeek(value: BigInt) {
    this.set("startWeek", Value.fromBigInt(value));
  }

  get endWeek(): BigInt {
    let value = this.get("endWeek");
    return value!.toBigInt();
  }

  set endWeek(value: BigInt) {
    this.set("endWeek", Value.fromBigInt(value));
  }
}

export class ERC20ListedInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20ListedInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20ListedInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20ListedInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC20ListedInfoPer30Day | null {
    return changetype<ERC20ListedInfoPer30Day | null>(
      store.get("ERC20ListedInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalListedToken(): BigInt {
    let value = this.get("totalListedToken");
    return value!.toBigInt();
  }

  set totalListedToken(value: BigInt) {
    this.set("totalListedToken", Value.fromBigInt(value));
  }

  get totalListedValue(): BigInt {
    let value = this.get("totalListedValue");
    return value!.toBigInt();
  }

  set totalListedValue(value: BigInt) {
    this.set("totalListedValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}

export class ERC20SoldInfoPer30Day extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC20SoldInfoPer30Day entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20SoldInfoPer30Day must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20SoldInfoPer30Day", id.toString(), this);
    }
  }

  static load(id: string): ERC20SoldInfoPer30Day | null {
    return changetype<ERC20SoldInfoPer30Day | null>(
      store.get("ERC20SoldInfoPer30Day", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalTransaction(): BigInt {
    let value = this.get("totalTransaction");
    return value!.toBigInt();
  }

  set totalTransaction(value: BigInt) {
    this.set("totalTransaction", Value.fromBigInt(value));
  }

  get totalSoldToken(): BigInt {
    let value = this.get("totalSoldToken");
    return value!.toBigInt();
  }

  set totalSoldToken(value: BigInt) {
    this.set("totalSoldToken", Value.fromBigInt(value));
  }

  get totalSoldValue(): BigInt {
    let value = this.get("totalSoldValue");
    return value!.toBigInt();
  }

  set totalSoldValue(value: BigInt) {
    this.set("totalSoldValue", Value.fromBigInt(value));
  }

  get startDay(): BigInt {
    let value = this.get("startDay");
    return value!.toBigInt();
  }

  set startDay(value: BigInt) {
    this.set("startDay", Value.fromBigInt(value));
  }

  get endDay(): BigInt {
    let value = this.get("endDay");
    return value!.toBigInt();
  }

  set endDay(value: BigInt) {
    this.set("endDay", Value.fromBigInt(value));
  }
}
