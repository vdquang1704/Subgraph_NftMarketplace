// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC1155Listed extends ethereum.Event {
  get params(): ERC1155Listed__Params {
    return new ERC1155Listed__Params(this);
  }
}

export class ERC1155Listed__Params {
  _event: ERC1155Listed;

  constructor(event: ERC1155Listed) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ERC1155ListedInfo extends ethereum.Event {
  get params(): ERC1155ListedInfo__Params {
    return new ERC1155ListedInfo__Params(this);
  }
}

export class ERC1155ListedInfo__Params {
  _event: ERC1155ListedInfo;

  constructor(event: ERC1155ListedInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalListedToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalListedValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC1155Sold extends ethereum.Event {
  get params(): ERC1155Sold__Params {
    return new ERC1155Sold__Params(this);
  }
}

export class ERC1155Sold__Params {
  _event: ERC1155Sold;

  constructor(event: ERC1155Sold) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ERC1155SoldInfo extends ethereum.Event {
  get params(): ERC1155SoldInfo__Params {
    return new ERC1155SoldInfo__Params(this);
  }
}

export class ERC1155SoldInfo__Params {
  _event: ERC1155SoldInfo;

  constructor(event: ERC1155SoldInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSoldToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalSoldValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC20Listed extends ethereum.Event {
  get params(): ERC20Listed__Params {
    return new ERC20Listed__Params(this);
  }
}

export class ERC20Listed__Params {
  _event: ERC20Listed;

  constructor(event: ERC20Listed) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC20ListedInfo extends ethereum.Event {
  get params(): ERC20ListedInfo__Params {
    return new ERC20ListedInfo__Params(this);
  }
}

export class ERC20ListedInfo__Params {
  _event: ERC20ListedInfo;

  constructor(event: ERC20ListedInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalListedToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalListedValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC20Sold extends ethereum.Event {
  get params(): ERC20Sold__Params {
    return new ERC20Sold__Params(this);
  }
}

export class ERC20Sold__Params {
  _event: ERC20Sold;

  constructor(event: ERC20Sold) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ERC20SoldInfo extends ethereum.Event {
  get params(): ERC20SoldInfo__Params {
    return new ERC20SoldInfo__Params(this);
  }
}

export class ERC20SoldInfo__Params {
  _event: ERC20SoldInfo;

  constructor(event: ERC20SoldInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSoldToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalSoldValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721Listed extends ethereum.Event {
  get params(): ERC721Listed__Params {
    return new ERC721Listed__Params(this);
  }
}

export class ERC721Listed__Params {
  _event: ERC721Listed;

  constructor(event: ERC721Listed) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721ListedInfo extends ethereum.Event {
  get params(): ERC721ListedInfo__Params {
    return new ERC721ListedInfo__Params(this);
  }
}

export class ERC721ListedInfo__Params {
  _event: ERC721ListedInfo;

  constructor(event: ERC721ListedInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalListedNft(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalListedValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721Sold extends ethereum.Event {
  get params(): ERC721Sold__Params {
    return new ERC721Sold__Params(this);
  }
}

export class ERC721Sold__Params {
  _event: ERC721Sold;

  constructor(event: ERC721Sold) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ERC721SoldInfo extends ethereum.Event {
  get params(): ERC721SoldInfo__Params {
    return new ERC721SoldInfo__Params(this);
  }
}

export class ERC721SoldInfo__Params {
  _event: ERC721SoldInfo;

  constructor(event: ERC721SoldInfo) {
    this._event = event;
  }

  get totalTransactions(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSoldNft(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalSoldValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NftMarketplace__ERC1155ListResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftAddress(): Address {
    return this.value1;
  }

  getSeller(): Address {
    return this.value2;
  }

  getTokenId(): BigInt {
    return this.value3;
  }

  getAmount(): BigInt {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }

  getTokenAvailable(): BigInt {
    return this.value6;
  }

  getSoldOut(): boolean {
    return this.value7;
  }
}

export class NftMarketplace__ERC20ListResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getTokenAddress(): Address {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getAmount(): BigInt {
    return this.value4;
  }
}

export class NftMarketplace__ERC721ListResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftAddress(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getSeller(): Address {
    return this.value4;
  }
}

export class NftMarketplace__getListingERC1155ResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftAddress(): Address {
    return this[1].toAddress();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get tokenAvailable(): BigInt {
    return this[6].toBigInt();
  }

  get soldOut(): boolean {
    return this[7].toBoolean();
  }
}

export class NftMarketplace__getListingERC20ResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }
}

export class NftMarketplace__getListingERC721ResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get seller(): Address {
    return this[4].toAddress();
  }
}

export class NftMarketplace extends ethereum.SmartContract {
  static bind(address: Address): NftMarketplace {
    return new NftMarketplace("NftMarketplace", address);
  }

  ERC1155List(param0: BigInt): NftMarketplace__ERC1155ListResult {
    let result = super.call(
      "ERC1155List",
      "ERC1155List(uint256):(uint256,address,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NftMarketplace__ERC1155ListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_ERC1155List(
    param0: BigInt
  ): ethereum.CallResult<NftMarketplace__ERC1155ListResult> {
    let result = super.tryCall(
      "ERC1155List",
      "ERC1155List(uint256):(uint256,address,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftMarketplace__ERC1155ListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  ERC20List(param0: BigInt): NftMarketplace__ERC20ListResult {
    let result = super.call(
      "ERC20List",
      "ERC20List(uint256):(uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NftMarketplace__ERC20ListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_ERC20List(
    param0: BigInt
  ): ethereum.CallResult<NftMarketplace__ERC20ListResult> {
    let result = super.tryCall(
      "ERC20List",
      "ERC20List(uint256):(uint256,address,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftMarketplace__ERC20ListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  ERC721List(param0: BigInt): NftMarketplace__ERC721ListResult {
    let result = super.call(
      "ERC721List",
      "ERC721List(uint256):(uint256,address,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NftMarketplace__ERC721ListResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_ERC721List(
    param0: BigInt
  ): ethereum.CallResult<NftMarketplace__ERC721ListResult> {
    let result = super.tryCall(
      "ERC721List",
      "ERC721List(uint256):(uint256,address,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftMarketplace__ERC721ListResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  _listingERC20(): BigInt {
    let result = super.call("_listingERC20", "_listingERC20():(uint256)", []);

    return result[0].toBigInt();
  }

  try__listingERC20(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_listingERC20",
      "_listingERC20():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _listingERC721(): BigInt {
    let result = super.call("_listingERC721", "_listingERC721():(uint256)", []);

    return result[0].toBigInt();
  }

  try__listingERC721(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_listingERC721",
      "_listingERC721():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _listingIds(): BigInt {
    let result = super.call("_listingIds", "_listingIds():(uint256)", []);

    return result[0].toBigInt();
  }

  try__listingIds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_listingIds", "_listingIds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingERC1155(
    listingId: BigInt
  ): NftMarketplace__getListingERC1155ResultValue0Struct {
    let result = super.call(
      "getListingERC1155",
      "getListingERC1155(uint256):((uint256,address,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(listingId)]
    );

    return changetype<NftMarketplace__getListingERC1155ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListingERC1155(
    listingId: BigInt
  ): ethereum.CallResult<NftMarketplace__getListingERC1155ResultValue0Struct> {
    let result = super.tryCall(
      "getListingERC1155",
      "getListingERC1155(uint256):((uint256,address,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(listingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getListingERC1155ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getListingERC20(
    listingERC20: BigInt
  ): NftMarketplace__getListingERC20ResultValue0Struct {
    let result = super.call(
      "getListingERC20",
      "getListingERC20(uint256):((uint256,address,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(listingERC20)]
    );

    return changetype<NftMarketplace__getListingERC20ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListingERC20(
    listingERC20: BigInt
  ): ethereum.CallResult<NftMarketplace__getListingERC20ResultValue0Struct> {
    let result = super.tryCall(
      "getListingERC20",
      "getListingERC20(uint256):((uint256,address,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(listingERC20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getListingERC20ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getListingERC721(
    itemCount: BigInt
  ): NftMarketplace__getListingERC721ResultValue0Struct {
    let result = super.call(
      "getListingERC721",
      "getListingERC721(uint256):((uint256,address,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(itemCount)]
    );

    return changetype<NftMarketplace__getListingERC721ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListingERC721(
    itemCount: BigInt
  ): ethereum.CallResult<NftMarketplace__getListingERC721ResultValue0Struct> {
    let result = super.tryCall(
      "getListingERC721",
      "getListingERC721(uint256):((uint256,address,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(itemCount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NftMarketplace__getListingERC721ResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenERC20Listing(): BigInt {
    let result = super.call(
      "tokenERC20Listing",
      "tokenERC20Listing():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenERC20Listing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenERC20Listing",
      "tokenERC20Listing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenERC20Sold(): BigInt {
    let result = super.call("tokenERC20Sold", "tokenERC20Sold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenERC20Sold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenERC20Sold",
      "tokenERC20Sold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyItemERC1155Call extends ethereum.Call {
  get inputs(): BuyItemERC1155Call__Inputs {
    return new BuyItemERC1155Call__Inputs(this);
  }

  get outputs(): BuyItemERC1155Call__Outputs {
    return new BuyItemERC1155Call__Outputs(this);
  }
}

export class BuyItemERC1155Call__Inputs {
  _call: BuyItemERC1155Call;

  constructor(call: BuyItemERC1155Call) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemERC1155Call__Outputs {
  _call: BuyItemERC1155Call;

  constructor(call: BuyItemERC1155Call) {
    this._call = call;
  }
}

export class BuyItemERC20Call extends ethereum.Call {
  get inputs(): BuyItemERC20Call__Inputs {
    return new BuyItemERC20Call__Inputs(this);
  }

  get outputs(): BuyItemERC20Call__Outputs {
    return new BuyItemERC20Call__Outputs(this);
  }
}

export class BuyItemERC20Call__Inputs {
  _call: BuyItemERC20Call;

  constructor(call: BuyItemERC20Call) {
    this._call = call;
  }

  get listingERC20(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemERC20Call__Outputs {
  _call: BuyItemERC20Call;

  constructor(call: BuyItemERC20Call) {
    this._call = call;
  }
}

export class BuyItemERC721Call extends ethereum.Call {
  get inputs(): BuyItemERC721Call__Inputs {
    return new BuyItemERC721Call__Inputs(this);
  }

  get outputs(): BuyItemERC721Call__Outputs {
    return new BuyItemERC721Call__Outputs(this);
  }
}

export class BuyItemERC721Call__Inputs {
  _call: BuyItemERC721Call;

  constructor(call: BuyItemERC721Call) {
    this._call = call;
  }

  get itemCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyItemERC721Call__Outputs {
  _call: BuyItemERC721Call;

  constructor(call: BuyItemERC721Call) {
    this._call = call;
  }
}

export class CancelListingERC1155Call extends ethereum.Call {
  get inputs(): CancelListingERC1155Call__Inputs {
    return new CancelListingERC1155Call__Inputs(this);
  }

  get outputs(): CancelListingERC1155Call__Outputs {
    return new CancelListingERC1155Call__Outputs(this);
  }
}

export class CancelListingERC1155Call__Inputs {
  _call: CancelListingERC1155Call;

  constructor(call: CancelListingERC1155Call) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CancelListingERC1155Call__Outputs {
  _call: CancelListingERC1155Call;

  constructor(call: CancelListingERC1155Call) {
    this._call = call;
  }
}

export class CancelListingERC20Call extends ethereum.Call {
  get inputs(): CancelListingERC20Call__Inputs {
    return new CancelListingERC20Call__Inputs(this);
  }

  get outputs(): CancelListingERC20Call__Outputs {
    return new CancelListingERC20Call__Outputs(this);
  }
}

export class CancelListingERC20Call__Inputs {
  _call: CancelListingERC20Call;

  constructor(call: CancelListingERC20Call) {
    this._call = call;
  }

  get listingERC20(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingERC20Call__Outputs {
  _call: CancelListingERC20Call;

  constructor(call: CancelListingERC20Call) {
    this._call = call;
  }
}

export class CancelListingERC721Call extends ethereum.Call {
  get inputs(): CancelListingERC721Call__Inputs {
    return new CancelListingERC721Call__Inputs(this);
  }

  get outputs(): CancelListingERC721Call__Outputs {
    return new CancelListingERC721Call__Outputs(this);
  }
}

export class CancelListingERC721Call__Inputs {
  _call: CancelListingERC721Call;

  constructor(call: CancelListingERC721Call) {
    this._call = call;
  }

  get itemCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingERC721Call__Outputs {
  _call: CancelListingERC721Call;

  constructor(call: CancelListingERC721Call) {
    this._call = call;
  }
}

export class ListItemERC1155Call extends ethereum.Call {
  get inputs(): ListItemERC1155Call__Inputs {
    return new ListItemERC1155Call__Inputs(this);
  }

  get outputs(): ListItemERC1155Call__Outputs {
    return new ListItemERC1155Call__Outputs(this);
  }
}

export class ListItemERC1155Call__Inputs {
  _call: ListItemERC1155Call;

  constructor(call: ListItemERC1155Call) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ListItemERC1155Call__Outputs {
  _call: ListItemERC1155Call;

  constructor(call: ListItemERC1155Call) {
    this._call = call;
  }
}

export class ListItemERC20Call extends ethereum.Call {
  get inputs(): ListItemERC20Call__Inputs {
    return new ListItemERC20Call__Inputs(this);
  }

  get outputs(): ListItemERC20Call__Outputs {
    return new ListItemERC20Call__Outputs(this);
  }
}

export class ListItemERC20Call__Inputs {
  _call: ListItemERC20Call;

  constructor(call: ListItemERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemERC20Call__Outputs {
  _call: ListItemERC20Call;

  constructor(call: ListItemERC20Call) {
    this._call = call;
  }
}

export class ListItemERC721Call extends ethereum.Call {
  get inputs(): ListItemERC721Call__Inputs {
    return new ListItemERC721Call__Inputs(this);
  }

  get outputs(): ListItemERC721Call__Outputs {
    return new ListItemERC721Call__Outputs(this);
  }
}

export class ListItemERC721Call__Inputs {
  _call: ListItemERC721Call;

  constructor(call: ListItemERC721Call) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemERC721Call__Outputs {
  _call: ListItemERC721Call;

  constructor(call: ListItemERC721Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingERC1155Call extends ethereum.Call {
  get inputs(): UpdateListingERC1155Call__Inputs {
    return new UpdateListingERC1155Call__Inputs(this);
  }

  get outputs(): UpdateListingERC1155Call__Outputs {
    return new UpdateListingERC1155Call__Outputs(this);
  }
}

export class UpdateListingERC1155Call__Inputs {
  _call: UpdateListingERC1155Call;

  constructor(call: UpdateListingERC1155Call) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateListingERC1155Call__Outputs {
  _call: UpdateListingERC1155Call;

  constructor(call: UpdateListingERC1155Call) {
    this._call = call;
  }
}

export class UpdateListingERC20Call extends ethereum.Call {
  get inputs(): UpdateListingERC20Call__Inputs {
    return new UpdateListingERC20Call__Inputs(this);
  }

  get outputs(): UpdateListingERC20Call__Outputs {
    return new UpdateListingERC20Call__Outputs(this);
  }
}

export class UpdateListingERC20Call__Inputs {
  _call: UpdateListingERC20Call;

  constructor(call: UpdateListingERC20Call) {
    this._call = call;
  }

  get listingERC20(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateListingERC20Call__Outputs {
  _call: UpdateListingERC20Call;

  constructor(call: UpdateListingERC20Call) {
    this._call = call;
  }
}

export class UpdateListingERC721Call extends ethereum.Call {
  get inputs(): UpdateListingERC721Call__Inputs {
    return new UpdateListingERC721Call__Inputs(this);
  }

  get outputs(): UpdateListingERC721Call__Outputs {
    return new UpdateListingERC721Call__Outputs(this);
  }
}

export class UpdateListingERC721Call__Inputs {
  _call: UpdateListingERC721Call;

  constructor(call: UpdateListingERC721Call) {
    this._call = call;
  }

  get itemCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateListingERC721Call__Outputs {
  _call: UpdateListingERC721Call;

  constructor(call: UpdateListingERC721Call) {
    this._call = call;
  }
}

export class WithdrawProceedsCall extends ethereum.Call {
  get inputs(): WithdrawProceedsCall__Inputs {
    return new WithdrawProceedsCall__Inputs(this);
  }

  get outputs(): WithdrawProceedsCall__Outputs {
    return new WithdrawProceedsCall__Outputs(this);
  }
}

export class WithdrawProceedsCall__Inputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}

export class WithdrawProceedsCall__Outputs {
  _call: WithdrawProceedsCall;

  constructor(call: WithdrawProceedsCall) {
    this._call = call;
  }
}
